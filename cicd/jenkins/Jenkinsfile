def repo = 'https://github.com/ahlrothanton/cpp-cicd-poc.git'
def branch = 'main'

pipeline {
    environment {
        imagename = "ahlrothanton/cpp-cicd-poc"
        dockerImage = ''
    }

    agent any

    stages {

        stage("checkout"){
            steps {
                git branch: branch, url: repo
            }
        }

        stage("changelog") {
            //when { changeRequest target: 'main' }
            steps {
                sh """
                    git log --pretty='- %s' > changelog.txt
                """
            }
        }

        stage("build"){
            steps {
                sh """
                    cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug
                    cmake --build build
                """
            }
        }

        stage("test"){
            steps {
                sh """
                    # test
                    cd build
                    ctest --output-junit test-results.xml --progress .
                    
                    # coverage
                    lcov -c -d . -o coverage.info
                    lcov --remove coverage.info -o coverage.final '/usr/include/*' '*.h'
                    
                    # generate coverate report as html
                    genhtml coverage.final --output-directory html
                """
            }
        }

        stage("build-image") {
            steps {
                script {
                    dockerImage = docker.build imagename
                }
            }
        }
        stage("publish-image") {
            steps {
                script {
                    try {
                        docker.withRegistry( "", 'dockerhub' ) {
                            dockerImage.push("$BUILD_NUMBER")
                            dockerImage.push("latest")
                        }
                    } catch (Exception e) {
                        error 'Unable to push image to DockerHub - did you remember to create the "dockerhub" credential?\n\n    Exception occurred: ' + e.toString() + '\n'
                    }
                }
            }
        }
    }

    post {
        always {
            // cleanup docker images
            script {
                try {
                    sh "docker rmi -f $imagename"
                } catch (Exception e) {
                    echo 'Unable to cleanup container images - maybe deleted already?\n    ' + e.toString()
                }
            }

            // archive the html files and publish them under reports
            junit skipMarkingBuildUnstable: true, testResults: 'build/test-results.xml'
            archiveArtifacts artifacts: 'build/coverage.final'
            archiveArtifacts artifacts: 'changelog.txt'
            archiveArtifacts artifacts: 'build/html/*.*'
            publishHTML (
                target : [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'build/html',
                    reportFiles: 'index.html',
                    reportName: 'reports',
                    reportTitles: 'Coverage Report'
                ]
            )
        }
    }
}
